<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>源码分析 on Eric&#39;s Blog</title>
    <link>https://ericwu0930.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
    <description>Recent content in 源码分析 on Eric&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://ericwu0930.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java SPI发现机制</title>
      <link>https://ericwu0930.github.io/post/java_spi/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/java_spi/</guid>
      <description>阅读本篇文章前默认已经掌握了Java的双亲委派模型。 最近在看Tomcat的自定义类加载器，在Tomat中一个JVM环境可能运行多个web ap</description>
    </item>
    
    <item>
      <title>RocketMQ源码分析（一）—— DefaultPushConsumer</title>
      <link>https://ericwu0930.github.io/post/mq_push_consumer/</link>
      <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/mq_push_consumer/</guid>
      <description>RocketMQ中有两类消费者——Push和Pull。Push指的是服务端主动推送消息给客户端，及时性好。RocketMQ的Push消费者类</description>
    </item>
    
    <item>
      <title>Java的四种引用以及ThreadLocal源码分析</title>
      <link>https://ericwu0930.github.io/post/reference/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/reference/</guid>
      <description>强引用： 只有所有的GC Roots对象都不通过强引用引用对象时，该对象才能被回收 软引用 当内存不足时，GC会把软引用指向的对象回收。软引用被经常</description>
    </item>
    
    <item>
      <title>ConcurrentHashMap源码分析</title>
      <link>https://ericwu0930.github.io/post/concurrenthashmap/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/concurrenthashmap/</guid>
      <description>本文总结自以下两篇博文，https://blog.csdn.net/weixin_44460333/article/details/8677</description>
    </item>
    
  </channel>
</rss>
