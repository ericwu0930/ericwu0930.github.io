<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Eric&#39;s Blog</title>
    <link>https://ericwu0930.github.io/categories/java/</link>
    <description>Recent content in Java on Eric&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://ericwu0930.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java SPI发现机制</title>
      <link>https://ericwu0930.github.io/post/java_spi/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/java_spi/</guid>
      <description>阅读本篇文章前默认已经掌握了Java的双亲委派模型。 最近在看Tomcat的自定义类加载器，在Tomat中一个JVM环境可能运行多个web ap</description>
    </item>
    
    <item>
      <title>RocketMQ源码分析（一）—— DefaultPushConsumer</title>
      <link>https://ericwu0930.github.io/post/mq_push_consumer/</link>
      <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/mq_push_consumer/</guid>
      <description>RocketMQ中有两类消费者——Push和Pull。Push指的是服务端主动推送消息给客户端，及时性好。RocketMQ的Push消费者类</description>
    </item>
    
    <item>
      <title>Java File常用操作总结</title>
      <link>https://ericwu0930.github.io/post/file/</link>
      <pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/file/</guid>
      <description>1. File对象 Java File是文件对象的抽象，对应于一个目录或一个文件。 当使用pathname创建一个File对象的时，该目录可以不存在，但在对</description>
    </item>
    
    <item>
      <title>异常堆栈信息丢失问题定位</title>
      <link>https://ericwu0930.github.io/post/omit_exception_stack/</link>
      <pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/omit_exception_stack/</guid>
      <description>1. 现象 在完成DataTalk推送队列化改造后，为了测试全局限流措施的有效性，设置信号量为20，使用python脚本在同一时间触发Beacon</description>
    </item>
    
    <item>
      <title>How Tomcat Works笔记</title>
      <link>https://ericwu0930.github.io/post/tomcat/</link>
      <pubDate>Tue, 03 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/tomcat/</guid>
      <description>1. Tomcat总体架构 作为一个服务器，其最基本的功能就是接收其他计算机发来的请求数据并进行解析，完成相关业务处理，然后把处理结果作为相应返回</description>
    </item>
    
    <item>
      <title>Java IO类详解</title>
      <link>https://ericwu0930.github.io/post/java_io/</link>
      <pubDate>Sun, 18 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/java_io/</guid>
      <description>File类 File类对应于一个目录或者一个文件，注意在使用文件的时候，比如通过流往文件中写入内容，该文件可以不存在，但是其父目录必须是有效的</description>
    </item>
    
    <item>
      <title>线程池浅谈</title>
      <link>https://ericwu0930.github.io/post/threadpool/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/threadpool/</guid>
      <description>一、回顾： 线程运行的两种方式： 方法一： 创建自定义类extends Thread （或者使用匿名类进行定义） 重写run()方法 调用该类start方法启动 new Thread(){</description>
    </item>
    
    <item>
      <title>反射与注解</title>
      <link>https://ericwu0930.github.io/post/reflection/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/reflection/</guid>
      <description>最近在学习Spring框架，分析源码时经常会用到反射和注解机制，这里对注解和反射做一个总结 1. 注解 首先，注解！=注释，注释是用文字描述程序，是</description>
    </item>
    
    <item>
      <title>JDK1.8新特性——Stream流</title>
      <link>https://ericwu0930.github.io/post/stream/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/stream/</guid>
      <description>转自原文https://blog.csdn.net/qq_37757008/article/details/84845556，稍作修改 1. St</description>
    </item>
    
    <item>
      <title>Java的四种引用以及ThreadLocal源码分析</title>
      <link>https://ericwu0930.github.io/post/reference/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/reference/</guid>
      <description>强引用： 只有所有的GC Roots对象都不通过强引用引用对象时，该对象才能被回收 软引用 当内存不足时，GC会把软引用指向的对象回收。软引用被经常</description>
    </item>
    
    <item>
      <title>ConcurrentHashMap源码分析</title>
      <link>https://ericwu0930.github.io/post/concurrenthashmap/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/concurrenthashmap/</guid>
      <description>本文总结自以下两篇博文，https://blog.csdn.net/weixin_44460333/article/details/8677</description>
    </item>
    
    <item>
      <title>内部类</title>
      <link>https://ericwu0930.github.io/post/innerclass/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/innerclass/</guid>
      <description>之前看过很多遍内部类，但总对其概念比较模糊，这次对其进行一个总结。 1. 内部类的特权 内部类指的是在一个类的内部所定义的类，类名不需要和源文件名相</description>
    </item>
    
  </channel>
</rss>
