<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on Eric&#39;s Blog</title>
    <link>https://ericwu0930.github.io/categories/tech/</link>
    <description>Recent content in Tech on Eric&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ericwu0930.github.io/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>内核态和用户态</title>
      <link>https://ericwu0930.github.io/post/privilege/</link>
      <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/privilege/</guid>
      <description>之前看操作系统相关的书籍，都会提到用户态和内核态，由于没有针对特定的操作系统，所以讲解的比较笼统，理解起来也没有很深刻，今天偶然在铜哥桌子上</description>
    </item>
    
    <item>
<<<<<<< HEAD
=======
      <title>键的过期策略</title>
      <link>https://ericwu0930.github.io/post/expire/</link>
      <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/expire/</guid>
      <description>1. 设置键的生存时间或过期时间 在Redis中，可以对任意键设置一个生存时间，有以下四个命令，他们之间的关系如下，其中以P开头的表明时间单位为毫</description>
    </item>
    
    <item>
      <title>select与epoll比较</title>
      <link>https://ericwu0930.github.io/post/epoll/</link>
      <pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/epoll/</guid>
      <description>1. 前言 假设要写一个echo服务器，用于对用户从标准输入键入的交互命令做出相应，在这种情况下，服务器必须相应两个独立的I/O事件：1）网络客户</description>
    </item>
    
    <item>
>>>>>>> a40befc26d5b37dc1e43951722c8fe5b6aea47c0
      <title>MVCC版本控制</title>
      <link>https://ericwu0930.github.io/post/mvcc/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/mvcc/</guid>
      <description>0. 事务回顾 MySQL中有四种事务隔离级别，READ UNCOMMITTED，READ COMMITTED， REPEATABLE READ，SERIALIZABLE，</description>
    </item>
    
    <item>
      <title>MySQL索引背后的数据结构及算法原理</title>
      <link>https://ericwu0930.github.io/post/innodb_index/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/innodb_index/</guid>
      <description>整体框架来源自 MySQL索引背后的数据结构及算法原理这是我近几年看到的最好的一篇有关数据库索引的文章，本人重新进行了排版，并将磁盘存取原理这</description>
    </item>
    
    <item>
      <title>线程池浅谈</title>
      <link>https://ericwu0930.github.io/post/threadpool/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/threadpool/</guid>
      <description>一、回顾： 线程运行的两种方式： 方法一： 创建自定义类extends Thread （或者使用匿名类进行定义） 重写run()方法 调用该类start方法启动 new Thread(){</description>
    </item>
    
    <item>
      <title>[转]Spring IOC</title>
      <link>https://ericwu0930.github.io/post/springioc/</link>
      <pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/springioc/</guid>
      <description>作者：Mingqi 链接：https://www.zhihu.com/question/23277575/answer/169698662 来源</description>
    </item>
    
    <item>
      <title>反射与注解</title>
      <link>https://ericwu0930.github.io/post/reflection/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/reflection/</guid>
      <description>最近在学习Spring框架，分析源码时经常会用到反射和注解机制，这里对注解和反射做一个总结 1. 注解 首先，注解！=注释，注释是用文字描述程序，是</description>
    </item>
    
    <item>
      <title>JDK1.8新特性——Stream流</title>
      <link>https://ericwu0930.github.io/post/stream/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/stream/</guid>
      <description>转自原文https://blog.csdn.net/qq_37757008/article/details/84845556，稍作修改 1. St</description>
    </item>
    
    <item>
      <title>Linux基础入门</title>
      <link>https://ericwu0930.github.io/post/linux_intro/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/linux_intro/</guid>
      <description>1. Linux权限管理 -rw-r--r-- - 文件类型(-文件 d目录 l软链接) rw- u所有者权限 r-- g所属组权限 r-- o其他人 改变文件权限： chmod [选项] 模式 文件名 - 常用选项 -R</description>
    </item>
    
    <item>
      <title>我的转码之路</title>
      <link>https://ericwu0930.github.io/post/summary/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/summary/</guid>
      <description>1. 前言 很幸运收到了腾讯Java后台开发的oc，从3月11号投递简历，到4月8号接到oc，非常感谢菜菜学长一直义务解答各种疑惑，受菜菜学长的委</description>
    </item>
    
    <item>
      <title>Redis数据结构与对象</title>
      <link>https://ericwu0930.github.io/post/redis_struct/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/redis_struct/</guid>
      <description>Redis是用c语言开发的一个开源的高性能键值对（key-value）数据库，Redis数据库里面的每个键值对都是由对象（object）组成</description>
    </item>
    
    <item>
      <title>InnoDB锁的实现</title>
      <link>https://ericwu0930.github.io/post/innodb_lock/</link>
      <pubDate>Tue, 24 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/innodb_lock/</guid>
      <description>本篇文章整理自《MySQL技术内幕》第6章 锁，调整了文章中的顺序使其更加符合逻辑，也对文章中令我感到疑惑的地方通过查阅资料进行了补充和说明 1.</description>
    </item>
    
    <item>
      <title>Java内存模型与锁优化</title>
      <link>https://ericwu0930.github.io/post/lock/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/lock/</guid>
      <description>1. Java内存模型 1.1 硬件的效率与一致性 基于高速缓存的存储交互很好的解决了处理器与内存的速度矛盾，但也为计算机系统带来更高的复杂度，因为它引入</description>
    </item>
    
    <item>
      <title>Java的四种引用以及ThreadLocal源码分析</title>
      <link>https://ericwu0930.github.io/post/reference/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/reference/</guid>
      <description>强引用： 只有所有的GC Roots对象都不通过强引用引用对象时，该对象才能被回收 软引用 当内存不足时，GC会把软引用指向的对象回收。软引用被经常</description>
    </item>
    
    <item>
      <title>红黑二叉树</title>
      <link>https://ericwu0930.github.io/post/redblackbst/</link>
      <pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/redblackbst/</guid>
      <description>在一棵含有N个结点的树种，我们希望树高为~lgN，这样我们就能保证所有查找都能在~lgN次比较内结束，就和二分查找一样。但是在动态插入种保证</description>
    </item>
    
    <item>
      <title>TCP:控制传输协议</title>
      <link>https://ericwu0930.github.io/post/tcp/</link>
      <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/tcp/</guid>
      <description>1. TCP概述 不同于UDP，TCP提供一种面向连接的、可靠的字节流服务，没有由TCP自动插入的记录标志或消息边界，TCP根本不会解读字节流里的</description>
    </item>
    
    <item>
      <title>加密与安全机制</title>
      <link>https://ericwu0930.github.io/post/security/</link>
      <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/security/</guid>
      <description>加密是为了满足以下需求：在不安全的信道上保护所传输信息的机密性、完整性以及可认证性。有两种重要的加密算法——对称密钥与非对称密钥。 对称密钥 在</description>
    </item>
    
    <item>
      <title>Java内存区域</title>
      <link>https://ericwu0930.github.io/post/mem/</link>
      <pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/mem/</guid>
      <description>Java与C++之间有一堵由内存动态分配和垃圾收集技术所围成的“高墙”，墙外面的人想进去，墙里面的人却想出来 1. 运行时数据区域划分 程序计数器：</description>
    </item>
    
    <item>
      <title>多态在JVM中的体现</title>
      <link>https://ericwu0930.github.io/post/polymorphism/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/polymorphism/</guid>
      <description>在《Java核心技术卷一》一书中，对方法调用有着比较明确的阐述。书中写道，假设要调用x.f(args)，隐式参数x声明为类C的一个对象，调用</description>
    </item>
    
    <item>
      <title>JVM方法调用过程</title>
      <link>https://ericwu0930.github.io/post/method/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/method/</guid>
      <description>以Demo类中的main方法为例，讲解字节码在虚拟机运行的过程 public class Demo{ public static void main(String[] args) { int a=10; int b=Short.MAX_VALUE+1; int c=a+b; System.out.println(c); } } 通过javap反编译后的代码 eric@wuhaodeMacBook-Pro  ~/Desktop/jvM  javap -v Demo</description>
    </item>
    
    <item>
      <title>数据库入门</title>
      <link>https://ericwu0930.github.io/post/mysql/</link>
      <pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/mysql/</guid>
      <description>一、MySQL数据库软件 MySQL的结构 MySQL是一个客户端/服务器的架构，它的服务器程序直接和我们存储的数据打交道，然后可以有好多客户端</description>
    </item>
    
    <item>
      <title>内存管理</title>
      <link>https://ericwu0930.github.io/post/memorymanage/</link>
      <pubDate>Mon, 30 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/memorymanage/</guid>
      <description>如果不对内存抽象，会面临两个问题。第一，用户程序可以很容易的破坏才做系统；第二，想要同时运行多个程序比较困难，需要对程序进行重定位。于是现代</description>
    </item>
    
    <item>
      <title>进程和线程</title>
      <link>https://ericwu0930.github.io/post/process/</link>
      <pubDate>Tue, 10 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ericwu0930.github.io/post/process/</guid>
      <description>1. 进程 1.1 概念 进程的经典定义是一个执行中的程序的实例。与每个进程相关的是地址空间，地址空间中存放有可执行程序、程序的数据以及程序的堆栈。与每个</description>
    </item>
    
  </channel>
</rss>